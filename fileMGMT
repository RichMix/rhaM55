# Figure 3.1: Significant file-system directories in Red Hat Enterprise Linux 9

The / directory is the root directory at the top of the file-system hierarchy. 
The / character is also used as a directory separator in file names. 
For example, if etc is a subdirectory of the / directory, then refer to that directory as /etc. 
Likewise, if the /etc directory contains a file that is named issue, then refer to that file as /etc/issue.
Subdirectories of / are used for standardized purposes to organize files by type and purpose to make it easier to find files.
For example, in the root directory, the /boot subdirectory is used for storing files to boot the system.

# Note
The following terms help to describe file-system directory contents:

Static content remains unchanged until explicitly edited or reconfigured.
Dynamic or variable content might be modified or appended by active processes.
Persistent content remains after a reboot, such as configuration settings.
Runtime content from a process or from the system is deleted on reboot.
The following table lists some of the significant directories on the system by name and purpose.

Table 3.1. Significant Red Hat Enterprise Linux Directories

Location	Purpose
/boot	Files to start the boot process.
/dev	Special device files that the system uses to access hardware.
/etc	System-specific configuration files.
/home	Home directory, where regular users store their data and configuration files.
/root	Home directory for the administrative superuser, root.
/run	Runtime data for processes that started since the last boot. This data includes process ID files and lock files. The contents of this directory are re-created on reboot. This directory consolidates the /var/run and /var/lock directories from earlier versions of Red Hat Enterprise Linux.
/tmp	A world-writable space for temporary files. Files that are not accessed, changed, or modified for 10 days are deleted from this directory automatically. The /var/tmp directory is also a temporary directory, in which files that are not accessed, changed, or modified in more than 30 days are deleted automatically.
/usr	Installed software, shared libraries, including files, and read-only program data. Significant subdirectories in the /usr directory include the following commands:
/usr/bin: User commands

/usr/sbin: System administration commands

/usr/local: Locally customized software

/var	System-specific variable data should persist between boots. Files that dynamically change, such as databases, cache directories, log files, printer-spooled documents, and website content, might be found under /var.

# Important
In Red Hat Enterprise Linux 7 and later, four older directories in / have identical contents to their counterparts in /usr:

/bin and /usr/bin

/sbin and /usr/sbin

/lib and /usr/lib

/lib64 and /usr/lib64

## Absolute Paths and Relative Paths
The path of a file or directory specifies its unique file-system location. 
Following a file path traverses one or more named subdirectories, which are delimited by a forward slash (/), until the destination is reached. Directories, also called folders, can contain other files and other subdirectories. 
Directories are referenced in the same manner as files.

# Important
A space character is acceptable in a Linux file name. 
The shell also uses spaces to distinguish options and arguments on the command line. 
If a command includes a file with a space in its name, then the shell can misinterpret the command and assume that the file name is multiple arguments. 
To avoid this mistake, surround such file names in quotation marks so that the shell interprets the name as a single argument. 
Red√Ç Hat recommends avoiding spaces at all in file names.

# Absolute Paths
An absolute path is a fully qualified name that specifies the exact location of the file in the file-system hierarchy. 
The absolute path begins at the root (/) directory and includes each subdirectory that must be traversed to reach the specific file. Every file in a file system has a unique absolute path name, which is recognized with a simple rule: a path name with a forward slash (/) as the first character is an absolute path name.

For example, the absolute path name for the system message log file is /var/log/messages. 
Absolute path names can be long to type, so files can also be located relative to the current working directory of your shell prompt.

# The Current Working Directory and Relative Paths
When a user logs in and opens a command window, the initial location is typically the user's home directory. 
System processes also have an initial directory. Users and processes change to other directories as needed. 
The working directory and current working directory terms refer to their current location.
Similar to an absolute path, a relative path identifies a unique location, and specifies only the necessary path to reach the location from the working directory.
Relative path names follow this rule: a path name with anything other than a forward slash as the first character is a relative path name. 
For example, relative to the /var directory, the message log file is log/messages.

Linux file systems, including ext4, XFS, GFS2, and GlusterFS, are case-sensitive.
Creating the FileCase.txt and filecase.txt files in the same directory results in two unique files.

Non-Linux file systems might work differently. For example, VFAT, Microsoft NTFS, and Apple HFS+ have case-preserving behavior. 
Although these file systems are not case-sensitive, they do display file names with the file's original capitalization. 
By creating the files in the preceding example on a VFAT file system, both names would point to the same file instead of to two different files.

Navigate Paths in the File System
The pwd command displays the full path name of the current working directory for that shell.
This command helps you to determine the syntax to reach files by using relative path names. 
The ls command lists directory contents for the specified directory or, if no directory is given, for the current working directory.

[user@host ~]$ pwd
/home/user
[user@host ~]$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
[user@host ~]$
Use the cd command to change your shell's current working directory. If you do not specify any arguments to the command, then it changes to your home directory.

In the following example, a mixture of absolute and relative paths are used with the cd command to change the current working directory for the shell.

[user@host ~]$ pwd
/home/user
[user@host ~]$ cd Videos
[user@host Videos]$ pwd
/home/user/Videos
[user@host Videos]$ cd /home/user/Documents
[user@host Documents]$ pwd
/home/user/Documents
[user@host Documents]$ cd
[user@host ~]$ pwd
/home/user
[user@host ~]$
In the preceding example, the default shell prompt also displays the last component of the absolute path to the current working directory.
For example, for the /home/user/Videos directory, only the Videos directory is displayed. 
The prompt displays the tilde character (~) when your current working directory is your home directory.

The touch command updates the time stamp of a file to the current date and time without otherwise modifying it. 
This command is useful for creating empty files, and can be used for practice, because when you use the touch command with a file name that does not exist, the file is created. 
In the following example, the touch command creates practice files in the Documents and Videos subdirectories.

[user@host ~]$ touch Videos/blockbuster1.ogg
[user@host ~]$ touch Videos/blockbuster2.ogg
[user@host ~]$ touch Documents/thesis_chapter1.txt
[user@host ~]$ touch Documents/thesis_chapter2.txt
[user@host ~]$
The ls command has multiple options for displaying attributes on files. 
The most common options are -l (long listing format), -a (all files, including hidden files), and -R (recursive, to include the contents of all subdirectories).

[user@host ~]$ ls -l
total 0
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Desktop
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Documents
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Downloads
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Music
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Pictures
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Public
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Templates
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Videos
[user@host ~]$ ls -la
total 40
drwx------. 17 user user 4096 Mar  2 03:07 .
drwxr-xr-x.  4 root root   35 Feb 10 10:48 ..
drwxr-xr-x.  4 user user   27 Mar  2 03:01 .ansible
-rw-------.  1 user user  444 Mar  2 04:32 .bash_history
-rw-r--r--.  1 user user   18 Aug  9  2021 .bash_logout
-rw-r--r--.  1 user user  141 Aug  9  2021 .bash_profile
-rw-r--r--.  1 user user  492 Aug  9  2021 .bashrc
drwxr-xr-x.  9 user user 4096 Mar  2 02:45 .cache
drwxr-xr-x.  9 user user 4096 Mar  2 04:32 .config
drwxr-xr-x.  2 user user    6 Mar  2 02:45 Desktop
drwxr-xr-x.  2 user user    6 Mar  2 02:45 Documents
...output omitted...
At the top of the listing are two special directories. One dot (.) refers to the current directory, and two dots (..) refer to the parent directory. 
These special directories exist in every directory on the system, and they are useful when using file management commands.

Important
File names that begin with a dot (.) indicate hidden files; you cannot see them in the normal view with ls and other commands. 
This behavior is not a security feature. Hidden files keep necessary user configuration files from cluttering home directories. 
Many commands process hidden files only with specific command-line options, and prevent one user's configuration from being accidentally copied to other directories or users.

To protect file contents from improper viewing requires the use of file permissions.

You can also use the tilde (~) special character in combination with other commands for better interaction with the home directory.

[user@host ~]$ cd /var/log/
[user@host log]$ ls -l ~
total 0
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Desktop
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Documents
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Downloads
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Music
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Pictures
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Public
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Templates
drwxr-xr-x. 2 user user 6 Mar  2 02:45 Videos
[user@host ~]$
The cd command has many options. Some options are useful to practice early and to use often. 
The cd - command changes to the previous directory, where the user was previously to the current directory. 
The following example illustrates this behavior, and alternates between two directories, which is useful when processing a series of similar tasks.

[user@host ~]$ cd Videos
[user@host Videos]$ pwd
/home/user/Videos
[user@host Videos]$ cd /home/user/Documents
[user@host Documents]$ pwd
/home/user/Documents
[user@host Documents]$ cd -
[user@host Videos]$ pwd
/home/user/Videos
[user@host Videos]$ cd -
[user@host Documents]$ pwd
/home/user/Documents
[user@host Documents]$ cd -
[user@host Videos]$ pwd
/home/user/Videos
[user@host Videos]$ cd
[user@host ~]$

# The cd .. command uses the (..) hidden directory to move up one level to the parent directory, without needing to know the exact parent name. 
# The other hidden directory (.) specifies the current directory on commands where the current location is either the source or destination argument, and avoids the need to type the directory's absolute path name.

[user@host Videos]$ pwd
/home/user/Videos
[user@host Videos]$ cd .
[user@host Videos]$ pwd
/home/user/Videos
[user@host Videos]$ cd ..
[user@host ~]$ pwd
/home/user
[user@host ~]$ cd ..
[user@host home]$ pwd
/home
[user@host home]$ cd ..
[user@host /]$ pwd
/
[user@host /]$ cd
[user@host ~]$ pwd
/home/user
[user@host ~]$
References
info libc 'file name resolution' (GNU C Library Reference Manual)

Section 11.2.2 File Name Resolution

https://www.gnu.org/software/libc/manual/html_node/File-Name-Resolution.html

bash(1), cd(1), ls(1), pwd(1), unicode(7), and utf-8(7) man pages

UTF-8 and Unicode

## Objectives
Create, copy, move, and remove files and directories.

# Command-line File Management
Creating, copying, moving, and, removing files and directories are common operations for a system administrator. 
Without options, some commands are used to interact with files, or they can manipulate directories with the appropriate set of options.

Be aware of the options that are used when running a command. The meaning of some options might differ between commands.

# Create Directories
The mkdir command creates one or more directories or subdirectories. 
It takes as an argument a list of paths to the directories that you want to create.

In the following example, files and directories are organized beneath the /home/user/Documents directory. 
Use the mkdir command and a space-delimited list of the directory names to create multiple directories.

[user@host ~]$ cd Documents
[user@host Documents]$ mkdir ProjectX ProjectY ProjectZ
[user@host Documents]$ ls
ProjectX  ProjectY ProjectZ
If the directory exists, or a parent directory of the directory that you are trying to create does not exist, then the mkdir command fails and it displays an error.

The mkdir command -p (parent) option creates any missing parent directories for the requested destination. 
In the following example, the mkdir command creates three ChapterN subdirectories with one command. 
The -p option creates the missing Thesis parent directory.

[user@host Documents]$ mkdir -p Thesis/Chapter1 Thesis/Chapter2 Thesis/Chapter3
[user@host Documents]$ ls -R Thesis/
Thesis/:
Chapter1  Chapter2  Chapter3

Thesis/Chapter1:

Thesis/Chapter2:

Thesis/Chapter3:
Use the mkdir command -p option with caution, because spelling mistakes can create unintended directories without generating error messages. 
In the following example, imagine that you are trying to create a Watched subdirectory in the Videos directory, 
but you accidentally omitted the letter "s" in Videos in your mkdir command.

[user@host ~]$ mkdir Video/Watched
mkdir: cannot create directory Video/Watched: No such file or directory
The mkdir command fails because the Video directory does not exist. 
If you had used the mkdir command with the -p option, then the Video directory would be created unintentionally. 
The Watched subdirectory would be created in that incorrect directory.

Copy Files and Directories
The cp command copies a file, and creates a file either in the current directory or in a different specified directory.

[user@host ~]$ cd Videos
[user@host Videos]$ cp blockbuster1.ogg blockbuster3.ogg
[user@host Videos]$ ls -l
total 0
-rw-rw-r--. 1 user user    0 Feb  8 16:23 blockbuster1.ogg
-rw-rw-r--. 1 user user    0 Feb  8 16:24 blockbuster2.ogg
-rw-rw-r--. 1 user user    0 Feb  8 16:34 blockbuster3.ogg
You can also use the cp command to copy multiple files to a directory. In this scenario, the last argument must be a directory. 
The copied files retain their original names in the new directory. 
If a file with the same name exists in the target directory, then the existing file is overwritten.

Note
By default, the cp command does not copy directories; it ignores them.

In the following example, two directories are listed as arguments, the Thesis and ProjectX directories. 
The last argument, the ProjectX directory, is the target and is valid as a destination. 
The Thesis argument is ignored by the cp command, because it is intended to be copied and it is a directory.

[user@host Documents]$ cp thesis_chapter1.txt thesis_chapter2.txt Thesis ProjectX
cp: -r not specified; omitting directory 'Thesis'
[user@host Documents]$ ls Thesis ProjectX
ProjectX:
thesis_chapter1.txt  thesis_chapter2.txt

Thesis:
Chapter1  Chapter2  Chapter3
The Thesis directory failed to copy, but the copying of the thesis_chapter1.txt and thesis_chapter2.txt files succeeded.

You can copy directories and their contents by using the cp command -r option. 
Keep in mind that you can use the . and .. special directories in command combinations. 
In the following example, the Thesis directory and its contents are copied to the ProjectY directory.

[user@host Documents]$ cd ProjectY
[user@host ProjectY]$ cp -r ../Thesis/ .
[user@host ProjectY]$ ls -lR
.:
total 0
drwxr-xr-x. 5 user user 54 Mar  7 15:08 Thesis

./Thesis:
total 0
drwxr-xr-x. 2 user user 6 Mar  7 15:08 Chapter1
drwxr-xr-x. 2 user user 6 Mar  7 15:08 Chapter2
drwxr-xr-x. 2 user user 6 Mar  7 15:08 Chapter3

./Thesis/Chapter1:
total 0

./Thesis/Chapter2:
total 0

./Thesis/Chapter3:
total 0
Move Files and Directories
The mv command moves files from one location to another.
If you think of the absolute path to a file as its full name, then moving a file is effectively the same as renaming a file. 
The contents of the files that are moved remain unchanged.

Use the mv command to rename a file. 
In the following example, the mv thesis_chapter2.txt command renames the thesis_chapter2.txt file to thesis_chapter2_reviewed.txt in the same directory.

[user@host Documents]$ ls -l
-rw-r--r--. 1 user user  7100 Mar  7 14:37 thesis_chapter1.txt
-rw-r--r--. 1 user user 11431 Mar  7 14:39 thesis_chapter2.txt
...output omitted...
[user@host Documents]$ mv thesis_chapter2.txt thesis_chapter2_reviewed.txt
[user@host Documents]$ ls -l
-rw-r--r--. 1 user user  7100 Mar  7 14:37 thesis_chapter1.txt
-rw-r--r--. 1 user user 11431 Mar  7 14:39 thesis_chapter2_reviewed.txt
...output omitted...
Use the mv command to move a file to a different directory. 
In the next example, the thesis_chapter1.txt file is moved from the ~/Documents directory to the ~/Documents/Thesis/Chapter1 directory. 
You can use the mv command -v option to display a detailed output of the command operations.

[user@host Documents]$ ls Thesis/Chapter1
[user@host Documents]$
[user@host Documents]$ mv -v thesis_chapter1.txt Thesis/Chapter1
renamed 'thesis_chapter1.txt' -> 'Thesis/Chapter1/thesis_chapter1.txt'
[user@host Documents]$ ls Thesis/Chapter1
thesis_chapter1.txt
[user@host Documents]$ ls -l
-rw-r--r--. 1 user user 11431 Mar  7 14:39 thesis_chapter2_reviewed.txt
...output omitted...
Remove Files and Directories
The rm command removes files. By default, rm does not remove directories.
You can use the rm command -r or the --recursive option to enable the rm command to remove directories and their contents. 
The rm -r command traverses each subdirectory first, and individually removes their files before removing each directory.

In the following example, the rm command removes the thesis_chapter1.txt file without options, but to remove the Thesis/Chapter1 directory, you must add the -r option.

[user@host Documents]$ ls -l Thesis/Chapter1
-rw-r--r--. 1 user user 7100 Mar  7 14:37 thesis_chapter1.txt
[user@host Documents]$ rm Thesis/Chapter1/thesis_chapter1.txt
[user@host Documents]$ rm Thesis/Chapter1
rm: cannot remove 'Thesis/Chapter1': Is a directory
[user@host Documents]$ rm -r Thesis/Chapter1
[user@host Documents]$ ls -l Thesis
drwxr-xr-x. 2 user user 6 Mar  7 12:37 Chapter2
drwxr-xr-x. 2 user user 6 Mar  7 12:37 Chapter3
Important
Red√Ç Hat Enterprise Linux does not provide a command-line undelete feature, nor a "trash bin" from which you can restore files held for deletion.
A trash bin is a component of a desktop environment such as GNOME, but is not used by commands that are run from a shell.

It is a good idea to verify your current working directory before you remove a file or directory by using relative paths.

[user@host Documents]$ pwd
/home/user/Documents
[user@host Documents]$ ls -l thesis*
-rw-r--r--. 1 user user 11431 Mar  7 14:39 thesis_chapter2_reviewed.txt
[user@host Documents]$ rm thesis_chapter2_reviewed.txt
[user@host Documents]$ ls -l thesis*
ls: cannot access 'thesis*': No such file or directory
You can use the rm command -i option to interactively prompt for confirmation before deleting. 
This option is essentially the opposite of using the rm command -f option, which forces the removal without prompting the user for confirmation.

[user@host Documents]$ rm -ri Thesis
rm: descend into directory 'Thesis'? y
rm: descend into directory 'Thesis/Chapter2'? y
rm: remove regular empty file 'Thesis/Chapter2/thesis_chapter2.txt'? y
rm: remove directory 'Thesis/Chapter2'? y
rm: remove directory 'Thesis/Chapter3'? y
rm: remove directory 'Thesis'? y
Warning
If you specify both the -i and -f options, then the -f option takes priority and you are not prompted for confirmation before rm removes files.

You can also use the rmdir command to remove empty directories.
Use the rm command -r option to remove non-empty directories.

[user@host Documents]$ pwd
/home/user/Documents
[user@host Documents]$ rmdir ProjectZ
[user@host Documents]$ rmdir ProjectX
rmdir: failed to remove 'ProjectX': Directory not empty
[user@host Documents]$ rm -r ProjectX
[user@host Documents]$
References
cp(1), mkdir(1), mv(1), rm(1), and rmdir(1) man pages
